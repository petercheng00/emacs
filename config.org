* Per-System Settings
#+BEGIN_SRC emacs-lisp
  (setq compile-command (getenv "COMPILE_COMMAND"))
#+END_SRC
* Keybindings
Using ~bind-key*~ will force precedence over keybinds from a mode map.
#+BEGIN_SRC emacs-lisp
  (use-package bind-key)

  (bind-key* [C-return] 'calc)
  (bind-key* [f5] 'recompile)
  (bind-key [f11] 'toggle-frame-fullscreen)

  (bind-key "M-," 'xref-pop-marker-stack)
  (bind-key "M-." 'xref-find-definitions)
  (bind-key "M-;" 'comment-line)
  (bind-key "M-/" 'company-complete)
  (bind-key* "M-n" (lambda() (interactive) (scroll-up 1)))
  (bind-key "M-o" 'other-window)
  (bind-key* "M-p" (lambda() (interactive) (scroll-down 1)))
  (bind-key "M-z" 'avy-zap-to-char-dwim)

  (bind-key "C-c SPC" 'avy-goto-line)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c d" 'docker)
  (bind-key "C-c f" 'counsel-git)
  (bind-key "C-c g" 'counsel-rg)
  (bind-key "C-c j" 'counsel-mark-ring)
  (bind-key "C-c m" 'mc/edit-lines)
  (bind-key* "C-c n" 'flycheck-next-error)
  (bind-key "C-c o" 'projectile-find-other-file)
  (bind-key* "C-c p" 'flycheck-previous-error)
  (bind-key "C-c r" 'replace-string)
  (bind-key "C-c s" 'swiper-all)
  (bind-key "C-c x" 'multi-vterm-next)
  (bind-key "C-c z" 'avy-zap-to-char)

  (bind-key "C-c C-SPC" 'avy-goto-char-2)
  (bind-key* "C-c C-f" 'counsel-fzf)
  (bind-key "C-c C-r" 'query-replace)
  (bind-key "C-c C-x" 'multi-vterm)

  (bind-key "C-x g" 'magit-status)
  (bind-key "C-x C-b" 'ibuffer)

  (bind-key "C-r" 'swiper)
  (bind-key "C-s" 'swiper)
#+END_SRC

* Emacs System Settings
#+BEGIN_SRC emacs-lisp
  ;; For profiling startup time
  (use-package esup
    :commands (esup)
    :config (setq esup-user-init-file (file-truename "~/emacs/init.el")))

  ;; Confirm quit
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Stop custom from cluttering init file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Store backups in os tmp instead of cluttering working dir.
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; Performance improvements for lsp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-use-selectable-prompt t))
  (use-package counsel
    :config
    (counsel-mode 1))
  (use-package swiper)
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
  (use-package ivy-rich
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode 1))
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  ;; Unlimited scrollback
  (setq term-buffer-maximum-size 0)

  ;; Vterm is a term mode that integrates really nicely with emacs keybindings
  (use-package vterm
    :config
    (setq vterm-max-scrollback 100000))

  ;; For managing multiple vterm buffers
  (use-package multi-vterm)
#+END_SRC
* Appearance
The main theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  ;; Icons used by doom-modeline
  ;; Scale factor helps to not increase modeline size (default is 1.2 for some reason)
  (use-package all-the-icons
    :config
    (setq all-the-icons-scale-factor 1.0))
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  ;; Modeline theme.
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; Flash modeline instead of bell sound
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#555555")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  ;; Column number in modeline
  (column-number-mode)
#+END_SRC
** UI Elements
#+BEGIN_SRC emacs-lisp
  ;; Disable startup screen and UI elements
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; Line numbers.
  (global-display-line-numbers-mode)

  ;; Highlight matching parens, and use same colors for matching pairs.
  (show-paren-mode 1)
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* File Management
#+BEGIN_SRC emacs-lisp
  ;; For opening files as sudo
  (use-package sudo-edit)
#+END_SRC
* Buffers
#+BEGIN_SRC emacs-lisp
  ;; Auto-update buffers on file change
  (global-auto-revert-mode 1)

  ;; Don't auto-split vertically
  (setq split-height-threshold nil)

  ;; Scroll compilation buffer until first error
  (setq compilation-scroll-output 'first-error)

  ;; Save window configs
  (winner-mode)

  ;; Clean up trailing whtitespace on edited lines on save
  (use-package ws-butler
    :config
    (ws-butler-global-mode))

  ;; Display terminal colors correctly in compilation buffer
  (require 'ansi-color)
  (defun endless/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'endless/colorize-compilation)
#+END_SRC
* Org Mode
(use-package org) should have been called prior to this file, in order to ensure the latest version of org is active.

#+BEGIN_SRC emacs-lisp
  ;; This makes indentation inside src blocks work
  (setq org-src-tab-acts-natively t)

  ;; Word wrap
  (setq org-startup-truncated nil)

  ;; Automatic indentation and hide prefix asterisks
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; For publishing org to hugo
  (use-package ox-hugo
    :after ox)

  ;; Org agenda
  (setq org-agenda-files '("~/org/"))
#+END_SRC
* Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-completion-system 'ivy)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* Version Control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n100")))
    (setq magit-diff-arguments (quote ("--ignore-space-change" "--ignore-all-space" "--no-ext-diff" "--stat"))))

  ;; Show git status per-line in the fringe
  (use-package git-gutter-fringe
    :config
    (global-git-gutter-mode))
#+END_SRC
* General Editing
Turned off undo-tree history since the files get humongous. Should just figure out how to limit size
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (global-subword-mode 1)
  (use-package avy)
  (use-package avy-zap)
  (use-package multiple-cursors)
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history nil)
    (setq undo-tree-history-directory-alist
          (quote (("" . "~/.emacs.d/undo_hist")))))
#+END_SRC
* Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  ;; Yasnippet for templated insertion
  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+END_SRC
* C++ Development
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cl\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

  ;; Clang-format on save
  (add-hook 'before-save-hook
            (lambda ()
              (when (member major-mode '(c-mode c++-mode glsl-mode))
                (progn
                  (when (locate-dominating-file "." ".clang-format")
                    (clang-format-buffer))
                  ;; Return nil, to continue saving.
                  nil))))

  ;; No indents for macros, opening parens, or namespaces
  (c-set-offset (quote cpp-macro) 0 nil)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)

  ;; More indentation settings
  (add-hook 'c++-mode-hook
            (setq c-default-style "linux"
                  c-basic-offset 2
                  tab-width 2
                  indent-tabs-mode nil))

  (use-package clang-format)
#+END_SRC
* Static Analysis
#+BEGIN_SRC emacs-lisp
  ;; Shellcheck for shell scripts
  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
    (add-hook 'sh-mode-hook 'flymake-mode))

  ;; Flycheck works better with lsp than flymake.
  (use-package flycheck)

  ;; Lsp frontend.
  (use-package lsp-mode
    :config
    (setq lsp-file-watch-threshold 100000)
    ;; Forget lsp watched folders on each start.
    (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht))))))
  (use-package lsp-ui)

  ;; Python lsp backend.
  (use-package lsp-pyright
    :ensure t
    ;; Use lsp + flake8 as backends simultaneously.
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)
                           (flycheck-add-next-checker 'lsp 'python-flake8))))

  ;; Dumb jump for rg-based jump-to-definition
  (use-package dumb-jump
    :config
    ;; Use ivy
    (setq dumb-jump-selector 'ivy)
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
    ;; Add to xref backends.
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC
* Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)
  (setq directory-abbrev-alist '(("^/workspaces/custom/src/iron_ox" . "/home/pcheng/io/iron_ox")))
#+END_SRC
