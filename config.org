* Per-System Settings
#+begin_src emacs-lisp
  (setq compile-command (getenv "COMPILE_COMMAND"))
#+end_src
* Keybindings
Using ~bind-key*~ will force precedence over keybinds from a mode map.
#+begin_src emacs-lisp
  (use-package bind-key)

  (bind-key* [C-return] 'calc)
  (bind-key* [f5] 'recompile)
  (bind-key [f11] 'toggle-frame-fullscreen)

  (bind-key "M-," 'xref-go-back)
  (bind-key "M-." 'xref-find-definitions)
  (bind-key "M-;" 'comment-line)
  (bind-key "M-/" 'company-complete)
  (bind-key* "M-n" (lambda() (interactive) (scroll-up 1)))
  (bind-key "M-o" 'other-window)
  (bind-key* "M-p" (lambda() (interactive) (scroll-down 1)))
  (bind-key "M-y" 'consult-yank-pop)
  (bind-key "M-z" 'avy-zap-to-char-dwim)

  (bind-key "C-c SPC" 'avy-goto-line)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c b" 'python-black-buffer)
  (bind-key "C-c e" 'consult-flymake)
  (bind-key "C-c f" 'consult-find)
  (bind-key "C-c g" 'consult-ripgrep)
  (bind-key "C-c i" 'consult-imenu)
  (bind-key "C-c r" 'replace-string)
  (bind-key "C-c x" 'multi-vterm-next)
  (bind-key "C-c z" 'avy-zap-to-char)

  (bind-key "C-c C-SPC" 'avy-goto-char-2)
  (bind-key "C-c C-r" 'query-replace)
  (bind-key "C-c C-x" 'multi-vterm)

  (bind-key "C-x b" 'consult-buffer)
  (bind-key "C-x d" 'dirvish-dwim)
  (bind-key "C-x g" 'magit-status)
  (bind-key "C-x C-b" 'ibuffer)

  (bind-key "C-s" 'consult-line)
#+end_src

* Emacs System Settings
#+begin_src emacs-lisp
  ;; Confirm quit
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Stop custom from cluttering init file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Store backups in os tmp instead of cluttering working dir.
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; For native-comp, don't foreground the warnings buffer.
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src
* Vertico and friends
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
  ;; (use-package vertico-directory
  ;;  :after vertico)
  (use-package consult
    :init
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Don't filter out dotfiles (e.g. .gitignore)
    (setq consult-find-args "find ."))
  (use-package marginalia
    :init
    (marginalia-mode))
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
* Terminal
#+begin_src emacs-lisp
  ;; Vterm is a term mode that integrates really nicely with emacs keybindings
  (use-package vterm
    :config
    (setq vterm-max-scrollback 100000))

  ;; For managing multiple vterm buffers
  (use-package multi-vterm)
#+end_src
* Appearance
The main theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+end_src
** Modeline
#+begin_src emacs-lisp
  ;; Icons used by doom-modeline
  (use-package all-the-icons)
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  ;; Dired alternative
  (use-package dirvish
    :init
    ;; Let Dirvish take over Dired globally
    (dirvish-override-dired-mode))

  ;; Modeline theme.
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-buffer-file-name-style 'relative-to-project))

  ;; Flash modeline instead of bell sound
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#555555")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  ;; Column number in modeline
  (column-number-mode)
#+end_src
** UI Elements
#+begin_src emacs-lisp
  ;; Disable startup screen and UI elements
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  ;; Line numbers.
  (global-display-line-numbers-mode)

  ;; Highlight matching parens, and use same colors for matching pairs.
  (show-paren-mode 1)
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* File Management
#+begin_src emacs-lisp
  ;; For opening files as sudo
  (use-package sudo-edit)
#+end_src
* Buffers
#+begin_src emacs-lisp
  ;; Auto-update buffers on file change
  (global-auto-revert-mode 1)

  ;; Don't auto-split vertically
  (setq split-height-threshold nil)

  ;; Scroll compilation buffer until first error
  (setq compilation-scroll-output 'first-error)

  ;; Save window configs
  (winner-mode)

  ;; Clean up trailing whtitespace on edited lines on save
  (use-package ws-butler
    :config
    (ws-butler-global-mode))

  ;; Display terminal colors correctly in compilation buffer
  (require 'ansi-color)
  (defun endless/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'endless/colorize-compilation)

  ;; Tree-sitter is part of emacs now, but this installs a bunch of languages.
  (use-package tree-sitter-langs
     :config
     (global-tree-sitter-mode)
     (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  ;; For loading recently opened files.
  (recentf-mode 1)
#+end_src
* Org Mode
(use-package org) should have been called prior to this file, in order to ensure the latest version of org is active.

#+begin_src emacs-lisp
  ;; This makes indentation inside src blocks work
  (setq org-src-tab-acts-natively t)

  ;; Word wrap
  (setq org-startup-truncated nil)

  ;; Automatic indentation and hide prefix asterisks
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; For publishing org to hugo
  (use-package ox-hugo
    :after ox)

  ;; Org agenda
  (setq org-agenda-files '("~/org/"))
#+end_src
* Version Control
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n100")))
    (setq magit-diff-arguments (quote ("--ignore-space-change" "--ignore-all-space" "--no-ext-diff" "--stat"))))

  ;; Show git status per-line in the fringe
  (use-package git-gutter
    :config
    (global-git-gutter-mode))
#+end_src
* General Editing
Turned off undo-tree history since the files get humongous. Should just figure out how to limit size
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (global-subword-mode 1)
  (use-package avy)
  (use-package avy-zap)
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history nil)
    (setq undo-tree-history-directory-alist
          (quote (("" . "~/.emacs.d/undo_hist")))))
#+end_src
* LSP
Using eglot for lsp
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'eglot-ensure)
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  ;; Yasnippet for templated insertion
  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+end_src
* C++ Development
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cl\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

  ;; Clang-format on save
  (add-hook 'before-save-hook
            (lambda ()
              (when (member major-mode '(c-mode c++-mode glsl-mode))
                (progn
                  (when (locate-dominating-file "." ".clang-format")
                    (clang-format-buffer))
                  ;; Return nil, to continue saving.
                  nil))))

  ;; No indents for macros, opening parens, or namespaces
  (c-set-offset (quote cpp-macro) 0 nil)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)

  ;; More indentation settings
  (add-hook 'c++-mode-hook
            (setq c-default-style "linux"
                  c-basic-offset 2
                  tab-width 2
                  indent-tabs-mode nil))

  (use-package clang-format)
#+end_src
* Python Development
#+begin_src emacs-lisp
  ;; Black formatter
  (use-package python-black
    :config
    :hook (python-mode . python-black-on-save-mode))
#+end_src
* Typescript Development
#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src
* Rust Development
#+begin_src emacs-lisp
  (use-package rust-mode
    :config
    (setq rust-format-on-save t))
#+end_src
