* Per-System Settings
#+BEGIN_SRC emacs-lisp
  (setq compile-command (getenv "COMPILE_COMMAND"))
#+END_SRC
* Package Management
Set up straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC
Use use-package as a frontend for straight
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC
* Keybindings
Using ~bind-key*~ will force precedence over keybinds from a mode map.
#+BEGIN_SRC emacs-lisp
  (use-package bind-key)

  (bind-key* [C-return] 'calc)
  (bind-key* [f5] 'recompile)
  (bind-key [f11] 'toggle-frame-fullscreen)

  (bind-key "M-," 'xref-pop-marker-stack)
  (bind-key "M-." 'xref-find-definitions)
  (bind-key "M-;" 'comment-line)
  (bind-key "M-/" 'company-complete)
  (bind-key "M-n" (lambda() (interactive) (scroll-up 1)))
  (bind-key "M-o" 'next-multiframe-window)
  (bind-key "M-O" 'previous-multiframe-window)
  (bind-key "M-p" (lambda() (interactive) (scroll-down 1)))
  (bind-key "M-x" 'helm-M-x)
  (bind-key "M-y" 'helm-show-kill-ring)
  (bind-key "M-z" 'avy-zap-to-char-dwim)

  (bind-key "C-c SPC" 'avy-goto-line)
  (bind-key "C-c ." 'eglot-code-actions)
  (bind-key "C-c d" 'delete-horizontal-space)
  (bind-key "C-c f" 'find-file-in-project-by-selected)
  (bind-key "C-c g" 'helm-rg)
  (bind-key "C-c h" 'eglot-help-at-point)
  (bind-key "C-c m" 'mc/edit-lines)
  (bind-key "C-c n" 'flymake-goto-next-error)
  (bind-key "C-c o" 'ff-find-related-file)
  (bind-key "C-c p" 'flymake-goto-prev-error)
  (bind-key "C-c r" 'replace-string)
  (bind-key "C-c s" 'helm-occur)
  (bind-key "C-c x" 'vterm-toggle)
  (bind-key "C-c z" 'avy-zap-to-char)

  (bind-key "C-c C-SPC" 'avy-goto-char-2)
  (bind-key "C-c C-r" 'query-replace)
  (bind-key "C-c C-x" 'vterm)

  (bind-key "C-x b" 'helm-mini)
  (bind-key "C-x g" 'magit-status)

  (bind-key "C-x C-b" 'ibuffer)
  (bind-key "C-x C-f" 'helm-find-files)

  (bind-key "C-h SPC" 'helm-all-mark-rings)
#+END_SRC

* Emacs System Settings
For profiling startup time
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :commands (esup)
    :config (setq esup-user-init-file (file-truename "~/emacs/init.el")))
#+END_SRC
Confirm quit
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
Stop custom from cluttering my init file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
Store backups in os tmp instead of cluttering working dir.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (require 'helm-config)
    (helm-autoresize-mode 1)
    (setq helm-split-window-in-side-p t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-imenu-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (setq helm-exit-idle-delay 0)
    (helm-mode 1))
  (use-package helm-rg)
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC
This will open a new vterm or toggle to an existing one
#+BEGIN_SRC emacs-lisp
  (use-package vterm-toggle
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-same-window))))
#+END_SRC

* Appearance
The main theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC
Icons used by doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :config
    (setq all-the-icons-scale-factor 1.0))
#+END_SRC
Modeline theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+END_SRC
Anzu shows x/n position during isearch
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :config
    (setq anzu-mode-lighter "")
    (setq anzu-cons-mode-line-p nil)
    (global-anzu-mode +1))
#+END_SRC
Flash modeline instead of bell sound
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#555555")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))
#+END_SRC
Disable startup screen and UI elements
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC
Show line numbers in code buffers. Turning it on globally slows down terminal buffers and other fast-scrolling buffers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
Highlight matching parens, and use same colors for matching pairs.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* File Management
For opening files as sudo
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC
Find file based on version control. Use fd instead of find.
#+BEGIN_SRC emacs-lisp
  (use-package find-file-in-project
    :config
    (setq ffip-use-rust-fd t))
#+END_SRC
* Buffers
Auto-update buffers on file change
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC
Don't auto-split vertically
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold nil)
#+END_SRC
Scroll compilation buffer until first error
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC
Save window configs
#+BEGIN_SRC emacs-lisp
  (winner-mode)
#+END_SRC
Clean up trailing whtitespace on edited lines on save
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC
This makes indentation inside src blocks work
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC
Word wrap
#+BEGIN_SRC emacs-lisp
(setq org-startup-truncated nil)
(add-hook 'org-mode-hook 'toggle-word-wrap)
#+END_SRC
Automatic indentation and hide prefix asterisks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
For publishing org to hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :after ox)
#+END_SRC
* Version Control
Git porcelain
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n100")))
    (setq magit-diff-arguments (quote ("--ignore-space-change" "--ignore-all-space" "--no-ext-diff" "--stat"))))
#+END_SRC
Show git status per-line in the fringe
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :config
    (global-git-gutter-mode))
#+END_SRC
* General Editing
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
  (use-package avy)
  (use-package avy-zap)
  (use-package multiple-cursors)
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist
          (quote (("" . "~/.emacs.d/undo_hist")))))
#+END_SRC
* Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
* C++ Development
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cl\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))
#+END_SRC
No indents for macros, opening parens, or namespaces
#+BEGIN_SRC emacs-lisp
  (c-set-offset (quote cpp-macro) 0 nil)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)
#+END_SRC
More indentation settings
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            (setq c-basic-offset 4
                  tab-width 4
                  indent-tabs-mode nil))
#+END_SRC
Use company-capf to talk to eglot
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '(company-capf))))
#+END_SRC
Other packages
#+BEGIN_SRC emacs-lisp
  (use-package clang-format)
#+END_SRC
* Static Analysis
Shellcheck for shell scripts
#+BEGIN_SRC emacs-lisp
  (use-package flymake-shellcheck
    :commands flymake-shellcheck-load
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
    (add-hook 'sh-mode-hook 'flymake-mode))
#+END_SRC
Eglot for C++ with ccls and python with pyls
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "ccls" "-init={\"clang\": {\"excludeArgs\": [\"-fopenmp=libomp\"]}}"))
    (add-to-list 'eglot-server-programs '((python-mode) "pyls"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure)
    (add-hook 'python-mode-hook 'eglot-ensure))
#+END_SRC
* CMake
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (setq cmake-tab-width 4)
#+END_SRC
